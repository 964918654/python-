from threading import Thread
import threading
import time
# import threading

def fn(num):
    while True:
        print(f'线程{num}'.center(30,'-'))
        time.sleep(1)

a = 0

# 多线程可以共享共享全局中的数据，全局中的数据在每一个线程中都可以访问和修改
# 修改以后，也会影响到全局

def fn2():
    global a
    for i in range(10):
        a += 1
        time.sleep(1)

def fn3():
    for i in range(10):
        print(a)
        time.sleep(1)

def fn4(num):
    global a
    for i in range(1000000):
        a += 1
    print(f'线程 {num}：',a)




if __name__ == '__main__':

    # 创建线程
    # t1 = Thread(target=fn,args=(1,))
    # t2 = Thread(target=fn,args=(2,))
    t1 = Thread(target=fn4,args=(1,))

    t2 = Thread(target=fn4,args=(2,))



    t1.start()
    t2.start()

    t1.join()
    t2.join()

    print('主线程结束~~',a)
    #注：这里执行结果线程2和线程1并没有到2000000
    #由于赋值运算是分两步，先运算再赋值，当线程1运算完还没赋值时，就执行了线程2，同理，发生了并发问题
