__slots__
#这是一个类属性，它的值是一个元组
#每一个对象有一个隐含的字典，用于存贮它的实例属性
#可以通过对象.__dict__来访问这个字典
#可以动态的向对象中添加属性，实际上就是在向这个字典中添加key value
#但用字典存储实例属性会消耗大量内存
#如果类会创建特别多的对象，可以使用__slots__来保存对象中属性（元组）
#__slots__需要一个序列作为参数，序列用来保存对象的属性名
#添加了该属性之后，对象就不会再使用字典中存储属性
#但此时，不能向对象中添加不存在的属性了，降低灵活性，提高性能
#__slots__不会被继承
__call__
#类中定义了__call__这个特殊方法，则该类实例会变成可调用的对象，也就是它们可以作为函数被调用
#当一个对象被调用时，实际上就是在调用它的__call__方法
functools
#标准库中的一个模块
#提供了一些高阶函数和装饰器，对函数进行一些扩展
@functools.wraps
将函数文档修改为指定函数的
@functools.lru_cache()
用来缓存函数执行的结果，避免对重复的参数重复执行函数
functools.reduce()
对序列中的结果进行整合
functools.partial（函数，参数...）
可以固定函数中的指定参数

对象池
小整数对象池
python将常用的整数，统一存储到小整数对象池中，使用时直接从对象池中获取，不需要重新创建
[-5,257)
大整数对象池
没有固定的对象，会根据实际使用，自动向池中添加对象
字符对象池
字符串intern机制

垃圾回收（gc）
1.引用计数
2.分代回收：
  将对象分别保存到了三个链表
  0代链表
  没有经历过垃圾回收的对象
  1代链表
  经历过一次垃圾回收的对象
  2代链表
  经历过两次以上垃圾回收的对象
  解决循环引用时，它会先从链表中获取一个根对象，（以一代链表为例）
  然后通过跟对象获取到和根对象相关的一串对象，然后将这一组对象放入到一代链表中
  如此反复，将0代链表中的所有的有根对象引用的对象全部提取到1代链表中
  然后将剩下的对象销毁！   
